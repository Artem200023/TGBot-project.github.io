from aiogram.dispatcher import FSMContext # –î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —Ä–∞–±–æ—Ç–∞–ª–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π)
from aiogram.dispatcher.filters.state import State, StatesGroup # –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram import types, Dispatcher
from create_bot import dp, bot, api
from keyboards import client_kb
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from data_base import sqlite_db
from danniey import popitka_db
from aiogram.dispatcher.filters import Text
#from aiogram_calendar import simple_cal_callback, SimpleCalendar, dialog_cal_callback, DialogCalendar
from aiogram_calendar_rus import simple_cal_callback, SimpleCalendar, dialog_cal_callback, DialogCalendar

import json # –ü—Ä–æ–±–Ω–∏–∫
#from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
#import asyncio #, time

admin = 1123330844
adresa = ['–ø—Ä. –õ–µ–Ω–∏–Ω–∞, 90', '–§—Ä—É–Ω–∑–µ 105']
#sent_message_ids = []

# –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
#@dp.message_handler(commands=['start', 'help'])
# –ü–æ –≤—ã–∑–æ–≤—É –∫–æ–º–∞–Ω–¥ –±—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def command_start(message:types.Message):
	#time.sleep(0.3) #time
	#await asyncio.sleep(1) # –ó–∞–¥–µ—Ä–∂–∫–∞ 
# try –Ω—É–∂–Ω–æ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∫–æ–≥–¥–∞ –ø–∏—Å–∞–ª –µ–º—É –ø—Ä–∏—Å—ã–ª–∞–ª—Å—å —Å—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞  - –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ except:
	try:
# reply_markup=kb_client - –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–ª–∞–≤–∞              
		await bot.send_message(message.from_user.id, '–•–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è !', reply_markup=client_kb.kb_client)
# –£–¥–∞–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞–ø–∏—Å–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º 
		#await message.delete()
	except:
		await message.reply('–û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –õ–°, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É: \nhttps://t.me/BarberArtemBot')
	await message.delete()
#@dp.message_handler(lambda message:'–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã' in message.text)            #@dp.message_handler(commands=['–†–µ–∂–∏–º_—Ä–∞–±–æ—Ç—ã'])
# –ü–æ –≤—ã–∑–æ–≤—É –∫–æ–º–∞–Ω–¥ –±—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def c_open(message:types.Message):                                         #async def command_open(message:types.Message):
	await bot.send_message(message.from_user.id, '–ü–Ω-–í—Å —Å 10:00 –¥–æ 21:00')

#@dp.message_handler(lambda message:'–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ' in message.text)		       #@dp.message_handler(commands=['–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ'])
# –ü–æ –≤—ã–∑–æ–≤—É –∫–æ–º–∞–Ω–¥ –±—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def c_place(message:types.Message):
	# reply_markup=ReplyKeyboardRemove() - –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ —É—Ö–æ–¥—è—Ç –Ω–∞ —Å–æ–≤—Å–µ–º
	await bot.send_message(message.from_user.id, '—É–ª. –õ–µ–Ω–∏–Ω–∞ 90, –§—Ä—É–Ω–∑–µ 105')#, reply_markup=ReplyKeyboardRemove())

#@dp.message_handler(lambda message: '–ú–µ–Ω—é' in message.text)
async def c_menu(message: types.Message):
	await sqlite_db.sql_read(message)
#----------------------------------------------------

#@dp.message_handler(commands='Refresh')            
# –ü–æ –≤—ã–∑–æ–≤—É –∫–æ–º–∞–Ω–¥ –±—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def c_refresh(message:types.Message):                                         
	await message.answer('–û–±–Ω–æ–≤–ª–µ–Ω–æ !', reply_markup=ReplyKeyboardRemove())
	await message.delete() 

#-------------------------------–ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É---------------------------------------

class FSMClient(StatesGroup):
	fio = State()
	phone = State()
	master = State()
	striga = State()
	#adres = State()
	#master = State()
	date = State()
	time = State()

# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
#@dp.message_handler(lambda message:'–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É' in message.text, state=None) 
async def cm_zapis(message: types.Message):
	await FSMClient.fio.set()
	await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è:', reply_markup=client_kb.kb_otmena)

#–í—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
#@dp.message_handler(state="*", commands= '–û—Ç–º–µ–Ω–∞')
#@dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∞', ignore_case=True), state="*")
async def otmena_handler(message: types.Message, state: FSMContext):
	#current_state = await state.get_state()
	#if current_state is None:
		#return
	await state.finish()
	await message.reply('–û—Ç–º–µ–Ω–∏–ª', reply_markup=client_kb.kb_client)

#–õ–æ–≤–∏–º 1-–π –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
#@dp.message_handler(state=FSMClient.fio)
async def cm_fio(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		data['fio'] = message.text
		data['sent_message_ids'] = []
	await FSMClient.next()
	await message.answer('–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ :', reply_markup=client_kb.kb_phone)

#–õ–æ–≤–∏–º 2-–π –æ—Ç–≤–µ—Ç
#@dp.message_handler(content_types=types.ContentType.CONTACT, state=FSMClient.phone) # –≠—Ç–æ —á—Ç–æ –±—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–µ
#async def cm_phone(message: types.Message, state: FSMContext): # –°–≤—è–∑–∞–Ω–Ω–æ —Å –ø–µ—Ä–≤—ã–º 
#@dp.message_handler(content_types=['contact', 'text'], state=FSMClient.phone)
async def cm_phone(message: [types.Contact, types.Message], state: FSMContext):
	async with state.proxy() as data:
		data['phone'] = message.contact.phone_number if message.contact else message.text
	await FSMClient.next()
	await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ :', reply_markup=client_kb.kb_otmena) # reply_markup=ReplyKeyboardRemove()) –£–¥–∞–ª—è—Ç—å –∫–Ω–æ–ø–∫–∏
#--------------------------------------------------------------- –ü—Ä–æ–±–Ω–∏–∫
	read = await sqlite_db.sql_readlenina()
	for ret in read:  
		#await bot.send_photo(message.from_user.id, ret[0], f'{ret[1]}\n{ret[2]}',reply_markup=InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton(text=f'–í—ã–±—Ä–∞—Ç—å {ret[1]}', callback_data=f'master {ret[1]}')))
		sent_message = await bot.send_photo(message.from_user.id, ret[0], f'{ret[1]}\n{ret[2]}',reply_markup=InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton(text=f'–í—ã–±—Ä–∞—Ç—å {ret[1]}', callback_data=f'master {ret[1]}')))
		async with state.proxy() as data:
			data['sent_message_ids'].append(sent_message.message_id) # –°–æ—Ö—Ä–∞–Ω—è–µ–º id —Å–æ–æ–±—â–µ–Ω–∏–π
		
#---------------------------------------------------------------
#–õ–æ–≤–∏–º 3-–π –æ—Ç–≤–µ—Ç
#@dp.callback_query_handler(lambda x: x.data and x.data.startswith('master '), state=FSMClient.master)
async def cm_master(call: types.CallbackQuery, state: FSMContext):
	async with state.proxy() as data:
#--------------------------------------------------------------- –ü—Ä–æ–±–Ω–∏–∫
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
		for msg_id in data['sent_message_ids']:
			await bot.delete_message(chat_id=call.message.chat.id, message_id=msg_id)
		data['sent_message_ids'].clear()  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
#---------------------------------------------------------------
		#await call.message.delete() # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π
		data['master'] = call.data.replace(f"master ","")
		await call.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {data['master']} ‚úÖ", reply_markup=client_kb.kb_otmena)
		#data['master'] = call.data.replace(f"master ","") 
	await FSMClient.next() #-------- Next

	await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É :', reply_markup=client_kb.kb_otmena)
#--------------------------------------------------------------- –ü—Ä–æ–±–Ω–∏–∫
	read = await sqlite_db.sql_read2() 
	for ret in read:  
		sent_message = await call.bot.send_photo(call.message.chat.id, ret[0], f'–ù–∞–∑–≤–∞–Ω–∏–µ: {ret[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {ret[2]}\n–¶–µ–Ω–∞: {ret[-1]}',reply_markup=InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton(text=f'–í—ã–±—Ä–∞—Ç—å {ret[1]}', callback_data=f'service {ret[1]}')))
		async with state.proxy() as data:
			data['sent_message_ids'].append(sent_message.message_id) # –°–æ—Ö—Ä–∞–Ω—è–µ–º id —Å–æ–æ–±—â–µ–Ω–∏–π
#---------------------------------------------------------------
#–õ–æ–≤–∏–º 4-–π –æ—Ç–≤–µ—Ç
#@dp.callback_query_handler(lambda x: x.data and x.data.startswith('service '), state=FSMClient.striga)
async def cm_striga(call: types.CallbackQuery, state: FSMContext):
	async with state.proxy() as data:
		#data['striga'] = call.message.text
		#await call.message.delete()
#--------------------------------------------------------------- –ü—Ä–æ–±–Ω–∏–∫
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
		for msg_id in data['sent_message_ids']:
			await bot.delete_message(chat_id=call.message.chat.id, message_id=msg_id)
		data['sent_message_ids'].clear()  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
#---------------------------------------------------------------
		data['striga'] = call.data.replace(f"service ","") #message.text
		await call.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {data['striga']} ‚úÖ", reply_markup=client_kb.kb_otmena)
	await FSMClient.next()
	with open('data1.json', 'r', encoding='utf-8') as f:
		all_staff = json.load(f)
		day = all_staff['data'].get('booking_dates')
		new_str1 = '\n'.join([f"üìÖ {item}" for item in day])
		await call.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É :\n{new_str1}", reply_markup=await SimpleCalendar().start_calendar())

	# await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É :', reply_markup=await SimpleCalendar().start_calendar())
#-----------------------------------------------------------------------------------------------------------
	#staff_id = data['master']
	#service_id = data['striga']
	#booking_days = api.get_available_days(staff_id=staff_id, service_id=service_id)


	#print(booking_days)

	#day = booking_days['data'].get('booking_dates')  # or .get('booking_days')
	#day = booking_days['data'].get('booking_dates') --------------
	#print(*day, sep='\n')
	#newline = '\n' --------------------
	#await call.message.answer(f"{*day, sep='\n'}")
	#await call.message.answer(f"{newline}{' '.join(day)}.{newline}") -----------------
	
	# #await call.message.answer(f"–î–∞—Ç—ã :\n{booking_days}")
	#for ret in booking_days['data'].dumps('booking_dates'):
		#await call.message.answer(f"{object(ret['booking_dates'])}", reply_markup=InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton(text=f"–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", callback_data=f"date1 —Å—Ç—Ä"))) 

#-------------------------------------------------------------------------------------------------------------
	#await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É :', reply_markup=await SimpleCalendar().start_calendar())
#–õ–æ–≤–∏–º 5-–π –æ—Ç–≤–µ—Ç
#@dp.callback_query_handler(simple_cal_callback.filter(), state=FSMClient.date)
async def cm_date(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
	async with state.proxy() as data:
		selected, date = await SimpleCalendar().process_selection(call, callback_data)
		if selected:
			with open('data1.json', 'r', encoding='utf-8') as f:
				all_staff = json.load(f)
				day = all_staff['data'].get('booking_dates')
            
				if date.strftime("%d-%m-%Y") in day:
					await call.message.delete()
					data['date'] = date.strftime("%d-%m-%Y")
					await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É :") 
					await call.message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {date.strftime("%d-%m-%Y")} ‚úÖ', reply_markup=client_kb.kb_otmena)
					#---------------------------------------- –ü—Ä–æ–±–Ω–∏–∫ (–ó–¥–µ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è) (–í—Ä–æ–¥–µ –≤—Å–µ —Ö–æ—Ä–æ—à–æ)
					with open('data2.json', 'r', encoding='utf-8') as f:
						time_slots = json.load(f)
						new_str = '\n'.join([f"{ret['time']}" for ret in time_slots['data']])
						#new_str1 = '\n'.join([f"‚è∞{ret['time']}" for ret in time_slots['data']])
						result = new_str.split()
						keyboard = types.InlineKeyboardMarkup(row_width=2)
						buttons = []
						for i, item in enumerate(result):
							num = types.InlineKeyboardButton(text=f'{item}', callback_data=f'time1 {item}')
							buttons.insert(i, num)
						keyboard.add(*buttons)
						await call.bot.send_message(call.message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è :\n", reply_markup=keyboard)
		
					#----------------------------------------
					# await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è', reply_markup=client_kb.kb_otmena)
				else:
					await call.message.delete()
					day = all_staff['data'].get('booking_dates')
					new_str1 = '\n'.join([f"üìÖ {item}" for item in day])
					await call.message.answer(f'–î–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –Ω–µ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —É –º–∞—Å—Ç–µ—Ä–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —É–∫–∞–∑–∞–Ω–Ω—É—é –Ω–∏–∂–µ ‚ùå\n{new_str1}', reply_markup=await SimpleCalendar().start_calendar())
					await FSMClient.previous()
				await FSMClient.next()
	
	#await FSMClient.next()
	
	#await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è :', reply_markup=client_kb.kb_otmena)

	# staff_id = data['master']
	# service_id = data['striga']
	# day = data['date']

	# time_slots = api.get_available_times(staff_id=staff_id, service_id=service_id, day=day)
	# #print(time_slots)
	# for ret in time_slots['data']: 
	# 	await call.message.answer(f"{ret['time']}", reply_markup=InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton(text=f"{ret['time']}", callback_data=f"time1 {ret['datetime']}"))) #f"service {ret['title']}")))
#–õ–æ–≤–∏–º 6-–π –æ—Ç–≤–µ—Ç
#@dp.callback_query_handler(lambda x: x.data and x.data.startswith('time1 '), state=FSMClient.time)
async def cm_time(call: types.CallbackQuery, state: FSMContext):
	async with state.proxy() as data:
		with open('data2.json', 'r', encoding='utf-8') as f:
			time_slots = json.load(f)
			new_str = '\n'.join([f"{ret['time']}" for ret in time_slots['data']])
			if call.data.replace("time1 ", "") in new_str:
				data['time'] = call.data.replace(f"time1 ","")
				await call.message.delete()
				await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è :")
				await call.message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {call.data.replace("time1 ", "")} ‚úÖ')
			else: 
				#await call.message.delete()
				await call.message.answer(f'–í—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑ –Ω–∏–∂–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ ‚ùå\n{new_str}', reply_markup=client_kb.kb_otmena)
				await FSMClient.previous()

		await call.message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã !', reply_markup=client_kb.kb_client)
		await call.bot.send_message(admin, f"–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞–ø–∏—Å—å !\n–ò–º—è: {data['fio']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n–ú–∞—Å—Ç–µ—Ä: {data['master']}\n–£—Å–ª—É–≥–∞: {data['striga']}\n–î–∞—Ç–∞: {data['date']}\n–í—Ä–µ–º—è: {data['time']}")
	await state.finish()

	#date_time = time_slots['data'].get('time')  # or .get('datetime')
#--------------------------------------------------------------------------
#@dp.callback_query_handler(lambda x: x.data and x.data.startswith('date1 '), state=FSMClient.date)
# async def cm_date(call: types.CallbackQuery, state: FSMContext):
# 	async with state.proxy() as data:
# 		data['date'] = call.data.replace(f"date1 ","") 
# 	await FSMClient.next()
# 	await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è :', reply_markup=client_kb.kb_otmena)

#--------------------------------------------------------------

		#, reply_markup=InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton(text=f"–í—ã–±—Ä–∞—Ç—å  {ret['title']}", callback_data=f"service {ret['id']}"))) #f"service {ret['title']}")))

	# for ret in booking_days['data']: 
	# 	await call.message.answer(f"{ret['title']}\n{str(ret['price_min'])}", reply_markup=InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton(text=f"–í—ã–±—Ä–∞—Ç—å  {ret['title']}", callback_data=f"service {ret['id']}"))) #f"service {ret['title']}")))


#–õ–æ–≤–∏–º —á–µ—Ç–≤–µ—Ä—Ç—ã–π –æ—Ç–≤–µ—Ç
#@dp.message_handler(state=FSMClient.adres)
# async def cm_adres(message: types.Message, state: FSMContext):
# 	async with state.proxy() as data:
# 		data['adres'] = message.text
# 	await FSMClient.next()

# 	if message.text in adresa:
# 		await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ :', reply_markup=client_kb.kb_otmena)

# 		if data['adres'] == '–ø—Ä. –õ–µ–Ω–∏–Ω–∞, 90':
# 			read = await sqlite_db.sql_readlenina()
	
# 		elif data['adres'] == '–§—Ä—É–Ω–∑–µ 105':
# 			read = await sqlite_db.sql_readfrynze()

# 		for ret in read:  
# 			await bot.send_photo(message.from_user.id, ret[0], f'{ret[1]}\n{ret[2]}',reply_markup=InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton(text=f'–í—ã–±—Ä–∞—Ç—å {ret[1]}', callback_data=f'master {ret[1]}')))
# 			#await bot.send_message(message.from_user.id, text='–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ !', reply_markup=client_kb.kb_case_inline)

# 	else:
# 		await message.answer('–î—Ä—É–∂–∏—â–µ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω–æ –∏–∑ –∫–Ω–æ–ø–æ–∫ !')
# 		await FSMClient.previous()

#–õ–æ–≤–∏–º —Å–µ–¥—å–º–æ–π –æ—Ç–≤–µ—Ç
# #@dp.message_handler(state=FSMClient.time)
# async def cm_time(message: types.Message, state: FSMContext):
# 	async with state.proxy() as data:
# 		data['time'] = message.text
# 	await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã !', reply_markup=client_kb.kb_client)
# 	await bot.send_message(admin, f"–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞–ø–∏—Å—å !\n–ò–º—è: {data['fio']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n–ú–∞—Å—Ç–µ—Ä: {data['master']}\n–°—Ç—Ä–∏–∂–∫–∞: {data['striga']}\n–î–∞—Ç–∞: {data['date']}\n–í—Ä–µ–º—è: {data['time']}")
	
# 	#await call.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã !", reply_markup=client_kb.kb_client)
# 	#await call.bot.send_message(admin, '–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞–ø–∏—Å—å !\n' +'–ò–º—è: ' +data['fio'] +'\n–¢–µ–ª–µ—Ñ–æ–Ω: ' +data['phone'] +'\n–°—Ç—Ä–∏–∂–∫–∞: ' +data['striga'] +'\n–ê–¥—Ä–µ—Å: ' +data['adres'] +'\n–ú–∞—Å—Ç–µ—Ä: ' +data['master'] ) #await call.bot.send_message(admin, '–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞–ø–∏—Å—å !', f'\n–ò–º—è: {data['fio']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n–°—Ç—Ä–∏–∂–∫–∞: {data['striga']}') 	
# 	#await call.bot.send_message(admin, text=f"–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞–ø–∏—Å—å ! {data['fio'], data['phone'], data['striga']}")
# 	#await call.bot.send_message(admin, '–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞–ø–∏—Å—å !', f'\n–ò–º—è: {data["fio"]}\n–¢–µ–ª–µ—Ñ–æ–Ω: {data["phone"]}\n–°—Ç—Ä–∏–∂–∫–∞: {data["striga"]}')
# 	await state.finish()

#----------------------------------------------------------------------------------------------------------------

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ –≤ –≥–ª–∞–≤–Ω–æ–º –∫–æ–¥–µ
def register_handlers_client(dp:Dispatcher):
	dp.register_message_handler(command_start, commands=['start', 'help'])
	dp.register_message_handler(c_open, lambda message:'–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã' in message.text)
	dp.register_message_handler(c_place, lambda message:'–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ' in message.text)
	dp.register_message_handler(c_menu, lambda message:'–ú–µ–Ω—é' in message.text)
	dp.register_message_handler(c_refresh, commands='Refresh')
	#----------------------------–•–µ–Ω–¥–ª–µ—Ä—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É--------------------------------
	dp.register_message_handler(cm_zapis, lambda message:'–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É' in message.text, state=None)
	dp.register_message_handler(otmena_handler, state="*", commands='–û—Ç–º–µ–Ω–∞')
	dp.register_message_handler(otmena_handler, Text(equals='–û—Ç–º–µ–Ω–∞', ignore_case=True), state="*")
	dp.register_message_handler(cm_fio, state=FSMClient.fio)
	dp.register_message_handler(cm_phone, content_types=['contact', 'text'], state=FSMClient.phone)
	dp.register_callback_query_handler(cm_master, lambda x: x.data and x.data.startswith("master "), state=FSMClient.master)
	dp.register_callback_query_handler(cm_striga, lambda x: x.data and x.data.startswith("service "), state=FSMClient.striga)
	#dp.register_message_handler(cm_adres, state=FSMClient.adres)
	dp.register_callback_query_handler(cm_date, simple_cal_callback.filter(), state=FSMClient.date)
	dp.register_callback_query_handler(cm_time, lambda x: x.data and x.data.startswith('time1 '), state=FSMClient.time)

